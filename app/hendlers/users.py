from aiogram import F, Router
from aiogram.types import Message
from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from db.models import Employee
from utils.crud import create_obj, get_obj, update_obj
from utils.update_data import update_data_user
from utils.validators import is_valid_data_user, is_valid_tg_id
from keyboards import kb
from utils.states import BannedForm, UserForm
from db.async_engine import async_session


user_router = Router()


# –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@user_router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def input_employee_name(message: types.Message, state: FSMContext):
    """–û–±—ä—è–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–æ–¥–æ–≤—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",)
    await state.set_state(UserForm.name)


@user_router.message(UserForm.name)
async def set_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ telegram_id"""
    await state.update_data(name=message.text)
    await state.set_state(UserForm.telegram_id)
    await message.answer(
        "–í–≤–µ–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º_id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    )


@user_router.message(UserForm.telegram_id)
async def set_telegram_id(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º id –≤ —Ñ–æ—Ä–º—É –∏ —Å–ø—Ä–∞–≤—à–∏–≤–∞–µ–º –¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –Ω–µ—Ç"""
    await state.update_data(telegram_id=message.text)
    await state.set_state(UserForm.is_admin)
    await message.answer(
        "–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?",
        reply_markup=kb.is_admin()
    )


@user_router.callback_query(F.data == "is_admin_true")
async def set_employee_admin(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–æ–º"""
    await state.set_state(UserForm.is_admin)
    await state.update_data(is_admin=True)
    await callback.answer()
    await output_data_employee(callback, state)


@user_router.callback_query(F.data == "is_admin_false")
async def output_data_employee(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–æ–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = await state.get_data()
    message_error = await is_valid_data_user(data)
    if message_error:
        await callback.message.answer(
            f'{message_error}\n –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
        return
    await callback.message.answer(
        f"{data.get('name')}\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º_id: {data.get('telegram_id')}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if data.get('is_admin') else '–ù–µ—Ç'}",
        reply_markup=kb.save_user()
    )
    await callback.answer()


@user_router.callback_query(F.data == "save_user")
async def save_employee(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–æ–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = update_data_user(await state.get_data())
    user = Employee(**data)
    await create_obj(async_session, user)
    await state.clear()
    await callback.answer()
    await callback.message.answer(
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω üëç"
    )


# –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@user_router.message(F.text.lower() == '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
async def start_banned_user(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º_id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    await state.set_state(BannedForm.tg_id)
    await message.answer(
        "–í–≤–µ–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º_id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    )


@user_router.message(BannedForm.tg_id)
async def banned_user(message: Message, state: FSMContext):
    """–í–∞–ª–µ–¥–∏—Ä—É–µ–º tg_id, —á–µ–∫–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    err_message = is_valid_tg_id(message.text)
    if err_message:
        await message.answer(err_message)
        return
    employee = await get_obj(async_session, Employee, 'telegram_id', message.text)
    if not employee:
        await message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç')
        return
    await state.update_data(employee=employee)
    if employee.is_banned:
        await message.answer(
            f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.first_name} {employee.last_name}',
            reply_markup=kb.unlock()
        )
    else:
        await message.answer(
            f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.first_name} {employee.last_name}',
            reply_markup=kb.block()
        )


@user_router.callback_query(F.data == "block")
async def save_block_user(callback: types.CallbackQuery, state: FSMContext):
    """–ë–∞–Ω–Ω–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º"""
    await block_unlock(callback, state, True)


@user_router.callback_query(F.data == "unlock")
async def save_block_user(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º"""
    await block_unlock(callback, state, False)


async def block_unlock(callback: types.CallbackQuery, state: FSMContext, is_banned: bool):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    data = await state.get_data()
    employee = data.get('employee')
    employee.is_banned = is_banned
    await update_obj(async_session, employee)
    await state.clear()
    await callback.answer()
    if is_banned:
        await callback.message.answer(
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        )
    else:
        await callback.message.answer(
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ä–∞–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        )
