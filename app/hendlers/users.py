from aiogram import F, Router
from aiogram.types import Message
from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from db.models import Employee
from utils.crud import create_obj
from utils.update_data import update_data_user
from utils.user_valid import is_valid_data_user
from keyboards import kb
from utils.states import UserForm
from db.async_engine import async_session


user_router = Router()


@user_router.callback_query(F.data == "add_user")
async def input_employee_name(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—ä—è–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    await callback.message.answer(
        "–í–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–æ–¥–æ–≤—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",)
    await state.set_state(UserForm.name)


@user_router.message(UserForm.name)
async def set_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ telegram_id"""
    await state.update_data(name=message.text)
    await state.set_state(UserForm.telegram_id)
    await message.answer(
        "–í–≤–µ–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º_id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    )


@user_router.message(UserForm.telegram_id)
async def set_telegram_id(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º id –≤ —Ñ–æ—Ä–º—É –∏ —Å–ø—Ä–∞–≤—à–∏–≤–∞–µ–º –¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –Ω–µ—Ç"""
    await state.update_data(telegram_id=message.text)
    await state.set_state(UserForm.is_admin)
    await message.answer(
        "–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?",
        reply_markup=kb.is_admin()
    )


@user_router.callback_query(F.data == "is_admin_true")
async def set_employee_admin(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–æ–º"""
    await state.set_state(UserForm.is_admin)
    await state.update_data(is_admin=True)
    await callback.answer()
    await output_data_employee(callback, state)


@user_router.callback_query(F.data == "is_admin_false")
async def output_data_employee(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–æ–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = await state.get_data()
    message_error = await is_valid_data_user(data)
    if message_error:
        await callback.message.answer(
            f'{message_error}\n –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
        return
    await callback.message.answer(
        f"{data.get('name')}\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º_id: {data.get('telegram_id')}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if data.get('is_admin') else '–ù–µ—Ç'}",
        reply_markup=kb.save_user()
    )
    await callback.answer()


@user_router.callback_query(F.data == "save_user")
async def save_employee(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–æ–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = update_data_user(await state.get_data())
    user = Employee(**data)
    await create_obj(async_session, user)
    await state.clear()
    await callback.answer()
    await callback.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω üëç",
                                #   reply_markup=repeat()
                                  )
